import React, { useState, useEffect } from 'react';

//Ícones
import {AiOutlineSearch} from 'react-icons/ai'
import {RiDashboardFill} from 'react-icons/ri'
import {IoIosArrowDroprightCircle,IoIosArrowDropleftCircle} from 'react-icons/io'
import {BiTargetLock} from 'react-icons/bi';
import {TiWarning} from 'react-icons/ti';
import {GoGraph} from 'react-icons/go';
import {MdDateRange} from 'react-icons/md';
import {FaUserFriends} from 'react-icons/fa';
//----
import api from '../../services/api';

import ContainerVulnerabilities from '../../components/ContainerVulnerabilities';
import BoxTitleIcons from '../../components/BoxTitleIcons';
import LinkNavigation from '../../components/LinkNavigation';

import './styles.css';
export interface Vulnerabilities{

    id: number,
    title: string,
    severity: string,
    cvss: string,
    publication_date: string,
    asset_count: number
}


const ListVulnerabilities = () => {
    const [search,setSearch] = useState('') //Estado do campo de busca
    const [vulnerabilities, setVulnerabilities] = useState<Vulnerabilities[]>([]); //Array com lista de vulnerabilidades
    const [filterList,setFilterList] = useState(''); //Estado para Query Param de filtro da rota de listagem  
    const [orderingList, setOrderingList] = useState(''); //Estado para Query param de ordenação da rota de listagem

    //Dados para paginação da lista
   const [dataPaginate, setDataPaginate] = useState({
       previous: null,
       next: null,
       count: 0,
       currentPage: 1
   })
   //página atual da listagem


   //Função para listagem das vulnerabilidades com seus query params que serão definidos pelo usuário.
   function handleListVulnerabilities(){
        api.get(`/api/vulnerabilities/?page=${dataPaginate.currentPage}&${filterList}=${search}&ordering=${orderingList}`)
        .then(response => {
            const {count,previous,next} = response.data;
            setDataPaginate({...dataPaginate,count,previous,next})
            setVulnerabilities(response.data.results)
        })
   }

    //A função de listagem será atualizada toda vez que o usuário paginar sobre a lista ou mudar o tipo de ordenação
    useEffect(() => {
        handleListVulnerabilities()
        //eslint-disable-next-line react-hooks/exhaustive-deps
    },[dataPaginate.currentPage, orderingList]) 

    
    //A lista será atualizada após o click do botão de busca com seus respectivos filtros e ordenações
    function handleListVulnerabilitiesByEventSearh(){
        handleListVulnerabilities()
        setDataPaginate({...dataPaginate, currentPage: 1}) 
    }

    
    function handleNextPage(){
        const {currentPage} = dataPaginate
        const next = currentPage + 1
        const totalPage = Math.ceil(dataPaginate.count / 50) // Número total de páginas da listagem
        if(currentPage < totalPage){
            setDataPaginate({...dataPaginate, currentPage: next})
        }
    }

    function handlePrevPage(){
        const {currentPage} = dataPaginate
        const prev = currentPage - 1

        if(currentPage > 1){
            setDataPaginate({...dataPaginate, currentPage: prev})
        }
    }

    return(
        <div className = 'container-list'>
             <header id = 'header-list'>
                <div className = 'header-content'>
                <div className = 'container-filter-order'>

                        <select name="filter" id="filter" onChange = {(e) => setFilterList(e.target.value)}>
                            <option value="">Filter by...</option>
                            <option value="asset">Host</option>
                            <option value="severity">Severity</option>
                        </select>

                        <select name="order" 
                        onChange = {(event) => {
                            setOrderingList(event.target.value); 
                        }} 

                        id="order">

                            <option value="">Order by...</option>
                            <option value="title">Title</option>
                            <option value="severity">Severity</option>
                            <option value="cvss">CVSS</option>
                            <option value="asset_count">Hosts</option>
                        </select>
                    </div>

                    <div className = 'search-container'>
                        <div className = 'search'>
                            <AiOutlineSearch />
                            <input type="search" onChange = {(e) => setSearch(e.target.value)}/>
                            
                        </div>
                        <button type = 'button' onClick = {handleListVulnerabilitiesByEventSearh}>Search</button>
                    </div>

                    <LinkNavigation urlLink = '/' textLink = 'DashBoard' IconLink = {RiDashboardFill}/>
                </div>
               
            </header>

            <main id = 'main-list'>
            <div className = 'container-title-icons'>
                <BoxTitleIcons title = 'Title' size = 'calc(1vw + 0.6em)' color = '#6600ff' Icon = {BiTargetLock} />
                <BoxTitleIcons title = 'Severity' size = 'calc(1vw + 0.6em)' color = '#ff6600' Icon = {TiWarning} />
                <BoxTitleIcons title = 'CVSS' size = 'calc(1vw + 0.6em)' color = '#00cc99' Icon = {GoGraph} />
                <BoxTitleIcons title = 'Date of publication' size = 'calc(1vw + 0.6em)' color = '#0066ff' Icon = {MdDateRange} />
                <BoxTitleIcons title = 'Affected hosts' size = 'calc(1vw + 0.6em)' color = '#cc3333' Icon = {FaUserFriends} />
            </div>
                <div className = 'box-list'>
                
                    {vulnerabilities.map(vulnerability => (
                         <ContainerVulnerabilities 
                         key = {vulnerability.id}
                         id = {vulnerability.id} 
                         title = {vulnerability.title} 
                         severity = {vulnerability.severity} 
                         cvss = {vulnerability.cvss}
                         publication_date = {vulnerability.publication_date}
                         asset_count = {vulnerability.asset_count}/>
                    ))}

                </div>
            </main>
            
            <footer id = 'footer-list'>
                <span>
                    Showing {vulnerabilities.length} of {dataPaginate.count} results
                </span>

                <div className = 'paginate-container'>
                     <button type = 'button' onClick = {handlePrevPage}>
                         <IoIosArrowDropleftCircle 
                         color = {dataPaginate.previous ? '#8c44f8' : '#c4c4c4'}  
                         size = 'calc(1vw + 1em)'/>
                     </button>

                     <strong>{dataPaginate.currentPage}</strong>

                     <button type = 'button' onClick = {handleNextPage}>
                         <IoIosArrowDroprightCircle 
                         color = {dataPaginate.next ? '#8c44f8' : '#c4c4c4'} 
                         size = 'calc(1vw + 1em)' />
                     </button>
                </div>
            </footer>
           
        </div>
    )
}

export default ListVulnerabilities;
