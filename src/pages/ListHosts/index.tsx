import React, { useEffect, useState } from 'react';

//ícones
import {AiOutlineSearch} from 'react-icons/ai';
import {RiInformationFill, RiDashboardFill} from 'react-icons/ri';
//-----

import api from '../../services/api';

//Componentes
import LineTable from '../../components/Table/LineTable';
import LinkNavigation from '../../components/LinkNavigation';
import ModalInforsHost from '../../components/Modals/ModalInforsHost';
//---

import './styles.css';

export interface Hosts{
    id: number,
    created: string,
    modified: string,
    hostname: string,
    ip_address: string,
    risk: string,
    vuln_count: number
}

const ListHosts = () => {

    const [hosts, setHosts] = useState<Hosts[]>([]) //estado com array de hosts
    const [search, setSearch] = useState('') //estado do campo de busca
    const [idHost, setIdHost] = useState(0) //estado para passar id do host ao modal de detalhes

    //Listagem de todos os hosts após renderização do componente.
    useEffect(() => {
       
       api.get('/api/assets?page=1').then(response => {
           setHosts(response.data.results)
       })

    }, [])

    //----

    //Função assíncrona para listar os hosts por vulnerabilidade específica
    async function findHostForVulnerability(){
        api.get(`/api/assets/?vulnerability=${search}`).then(response => {
            //Alterando estado da listagem de hosts
            setHosts(response.data.results)
        })
    }

    return(
        <div className = 'container-list'>

            <header id = 'header-list'>
                <div className = 'header-content'>
                    <div className = 'search-container'>
                        <div className = 'search'>
                            <AiOutlineSearch />
                            <input type="search" onChange = {(e) => setSearch(e.target.value)}/>
                        
                        </div>
                        <button type = 'button' onClick = {findHostForVulnerability}>Search</button>
                    </div>

                    <LinkNavigation urlLink = '/DashBoard' textLink = 'DashBoard' IconLink = {RiDashboardFill}/>
                </div>
               
            </header>

            <main id = 'main-list'>
                <div className = 'container-table'>

                    {/* LineTable: Componente que representa cada linha da tabela de hosts */}
                    <LineTable 
                    id = 'ID'
                    created = 'Created'
                    modified = 'Modified' 
                    hostname = 'Host'
                    ip_address = 'IP Address'
                    risk = 'Risk'
                    vuln_count = 'Vulnerabilities'/>
                    
                    {/* Percorrendo o array de hosts e inserindo dados na tabela */}

                    {hosts.map(host => (

                        <LineTable 
                        key = {host.id}
                        id = {`${host.id}`}
                        created = {host.created}
                        modified = {host.modified} 
                        hostname = {host.hostname}
                        ip_address = {host.ip_address}
                        risk = {host.risk}
                        vuln_count = {`${host.vuln_count}`}>
                            
                            {/*Botão para acionar modal de com detalhes do host */}
                            <button 
                            onClick = {() => setIdHost(host.id)}
                            id = 'button-icon-infors' 
                            type="button" data-toggle="modal" 
                            data-target="#ModalInforsHost">

                                <RiInformationFill size = 'calc(1vw +  1em)' color = '#8c44f8' />
                            </button>
                        
                        </LineTable>
                    ))}
                    
                    {/*Modal de detalhes do host (acionado após o botão de detalhe ser clicado) */}

                    <ModalInforsHost  idHost = {idHost} />

                    {/* -------- */}

                    {/*Rodapé com número de resultados da pesquisa e paginação da lista */}

                    <footer>
                        <p>Mostrando {hosts.length} de {hosts.length} resultados</p>

                        <nav aria-label="Page navigation example">
                            <ul className="pagination">
                                <li className="page-item">
                                <button className="page-link" aria-label="Previous">
                                    <span aria-hidden="true">&laquo;</span>
                                </button>
                                </li>
                                <li className="page-item"><button className="page-link" >1</button></li>
                                <li className="page-item"><button className="page-link">2</button></li>
                                <li className="page-item"><button className="page-link">3</button></li>
                                <li className="page-item">
                                <button className="page-link" aria-label="Next">
                                    <span aria-hidden="true">&raquo;</span>
                                </button>
                                </li>
                            </ul>
                        </nav>
                    </footer>
                    {/* --------- */}
                </div>
            </main>
        </div>
    )
}

export default ListHosts;